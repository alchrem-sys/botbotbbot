import asyncio
import os
import json
from datetime import datetime, timedelta, timezone
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters


# üîπ –û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω —ñ–∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Railway (—á–µ—Ä–µ–∑ Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN is missing! Set it in Railway Variables.")
# üîπ –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

DATA_FILE = "data.json"

# --- Load/save data ---
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

data = load_data()

# --- Commands ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in data:
        data[user_id] = {"plus": 0.0, "minus": 0.0, "balance": 0.0, "last_ack": None}
        save_data(data)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ø–ª—é—Å—ñ–≤ —ñ –º—ñ–Ω—É—Å—ñ–≤.\n\n"
        "–ü–∏—à–∏ +5 –∞–±–æ -3 —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /reset ‚Äî —Å–∫–∏–Ω—É—Ç–∏.\n\n"
        "–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è –æ 23:00 –∑–∞ –ö–∏—î–≤–æ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è üîî ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É¬ª.\n"
        "–ù–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏."
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data[user_id] = {"plus": 0.0, "minus": 0.0, "balance": 0.0, "last_ack": None}
    save_data(data)
    await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∫–∏–Ω—É—Ç–æ!")

# --- Handle messages ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    # ensure user exists
    if user_id not in data:
        data[user_id] = {"plus": 0.0, "minus": 0.0, "balance": 0.0, "last_ack": None}

    if text.startswith(("+", "-")):
        try:
            value = float(text)
            if value > 0:
                data[user_id]["plus"] += value
            else:
                data[user_id]["minus"] += abs(value)

            data[user_id]["balance"] = round(data[user_id]["plus"] - data[user_id]["minus"], 2)
            save_data(data)

            await update.message.reply_text(
                f"‚úÖ –ü–ª—é—Å: {round(data[user_id]['plus'], 2)}\n"
                f"‚ùå –ú—ñ–Ω—É—Å: {round(data[user_id]['minus'], 2)}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(data[user_id]['balance'], 2)}"
            )
        except ValueError:
            await update.message.reply_text("–ü–∏—à–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –∑—ñ –∑–Ω–∞–∫–æ–º (+5 –∞–±–æ -3).")

    elif "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤" in text:
        data[user_id]["last_ack"] = datetime.now(timezone.utc).isoformat()
        save_data(data)
        await update.message.reply_text("üî• –ö—Ä–∞—Å–∞–≤–∞, –∞–ª—å—Ñ–∞ –ø—Ä–æ–∫—Ä—É—á–µ–Ω–∞!")

    else:
        await update.message.reply_text("–ü–∏—à–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –∞–±–æ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª üòâ")

# --- Daily reminder ---
async def daily_reminder(app: Application):
    while True:
        now = datetime.now(timezone.utc)
        target = now.replace(hour=20, minute=0, second=0, microsecond=0)  # 23:00 Kyiv
        if now > target:
            target += timedelta(days=1)

        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        for user_id in list(data.keys()):
            try:
                await app.bot.send_message(chat_id=int(user_id), text="üîî –ü—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user_id}: {e}")

        # —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É –ø–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        await asyncio.sleep(3600)
        for user_id in list(data.keys()):
            try:
                await app.bot.send_message(chat_id=int(user_id), text="‚è∞ –Ø–∫—â–æ —â–µ –Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∏–≤ ‚Äî —Å–∞–º–µ —á–∞—Å!")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ (2): {e}")

# --- Main ---
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
    asyncio.create_task(daily_reminder(app))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway Worker!")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()  # —Ç—Ä–∏–º–∞—î –ø—Ä–æ—Ü–µ—Å –∞–∫—Ç–∏–≤–Ω–∏–º

if __name__ == "__main__":
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except KeyboardInterrupt:
        print("üõë –ó—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")


