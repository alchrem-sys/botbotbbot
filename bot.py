import asyncio
import os
import json
from datetime import datetime, timedelta, timezone
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# -------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
    exit(1)

ADMIN_ID = 868931721  # <- —Ç–≤—ñ–π Telegram ID
DATA_FILE = "data.json"

# -------------------- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö --------------------
data_lock = asyncio.Lock()

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

data = load_data()

async def save_data():
    async with data_lock:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

# -------------------- –ö–æ–º–∞–Ω–¥–∏ --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in data:
        data[user_id] = {"plus": 0.0, "minus": 0.0, "balance": 0.0, "last_ack": None}
        await save_data()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç, –Ø –±–æ—Ç –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ø–ª—é—Å—ñ–≤ —ñ –º—ñ–Ω—É—Å—ñ–≤ –Ω–∞ –∞–ª—å—Ñ—ñ.\n\n"
        "–ü–∏—à–∏ —Ç–∏–ø—É +5 –∞–±–æ -3, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /reset ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å.\n\n"
        "–ö–æ–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—é –±–æ—Ç, —á–∏—Å–ª–∞ –Ω–µ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É—é—Ç—å—Å—è.\n"
        "–©–æ–¥–Ω—è –æ 23:00 –∑–∞ –ö–∏—î–≤–æ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è üîî ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É¬ª.\n"
        "–ù–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏.\n\n"
        "–Ø–∫—â–æ –±—É–¥—É—Ç—å –º–æ–∂–ª–∏–≤—ñ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ - —è –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª—é —ñ —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É - –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start –∑–Ω–æ–≤—É. (25$ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ü–µ –¥–æ—Ö—É—è)\n\n"
        "–ó–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫—É? - @l1oxsha"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data[user_id] = {"plus": 0.0, "minus": 0.0, "balance": 0.0, "last_ack": None}
    await save_data()
    await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∫–∏–Ω—É—Ç–æ!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip().lower()

    if user_id not in data:
        data[user_id] = {"plus": 0.0, "minus": 0.0, "balance": 0.0, "last_ack": None}

    if text.startswith(("+", "-")):
        try:
            value = float(text.replace(" ", ""))
            if value > 0:
                data[user_id]["plus"] += value
            else:
                data[user_id]["minus"] += abs(value)

            data[user_id]["balance"] = round(data[user_id]["plus"] - data[user_id]["minus"], 2)
            await save_data()

            await update.message.reply_text(
                f"‚úÖ –ü–ª—é—Å: {round(data[user_id]['plus'], 2)}\n"
                f"‚ùå –ú—ñ–Ω—É—Å: {round(data[user_id]['minus'], 2)}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(data[user_id]['balance'], 2)}"
            )
        except ValueError:
            await update.message.reply_text("–ü–∏—à–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –∑—ñ –∑–Ω–∞–∫–æ–º (+5 –∞–±–æ -3).")
    elif "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤" in text:
        data[user_id]["last_ack"] = datetime.now(timezone.utc).isoformat()
        await save_data()
        await update.message.reply_text("üî• –ö—Ä–∞—Å–∞–≤–∞, –∞–ª—å—Ñ–∞ –ø—Ä–æ–∫—Ä—É—á–µ–Ω–∞")
    else:
        await update.message.reply_text("–ü–∏—à–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –∞–±–æ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª üòâ")

# -------------------- –ê–¥–º—ñ–Ω-—Ä–æ–∑—Å–∏–ª–∫–∞ --------------------
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: /broadcast –¢–µ–∫—Å—Ç")
        return

    message = " ".join(context.args)
    success, fail = 0, 0

    for uid in data.keys():
        try:
            await context.bot.send_message(chat_id=int(uid), text=message)
            success += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {uid}: {e}")
            fail += 1

    await update.message.reply_text(f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø—ñ—à–Ω–æ: {success}, –ù–µ –≤–¥–∞–ª–æ—Å—è: {fail}")

# -------------------- –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è --------------------
async def daily_reminder(app: Application):
    while True:
        now = datetime.now(timezone.utc)
        target = now.replace(hour=20, minute=0, second=0, microsecond=0)  # 23:00 –ö–∏—ó–≤
        if now > target:
            target += timedelta(days=1)

        await asyncio.sleep((target - now).total_seconds())

        for user_id in data.keys():
            try:
                await app.bot.send_message(chat_id=int(user_id), text="üîî –ü—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user_id}: {e}")

        # –î—Ä—É–≥–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É
        await asyncio.sleep(3600)
        for user_id in data.keys():
            try:
                await app.bot.send_message(chat_id=int(user_id), text="‚è∞ –Ø–∫—â–æ —â–µ –Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∏–≤ ‚Äî —Å–∞–º–µ —á–∞—Å!")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ (2) {user_id}: {e}")

# -------------------- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è --------------------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    async def start_reminder(app: Application):
        asyncio.create_task(daily_reminder(app))

    app.post_init = start_reminder

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()


