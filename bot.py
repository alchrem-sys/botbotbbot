import asyncio
import os
from datetime import datetime, timedelta, timezone
import asyncpg
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "868931721"))

if not BOT_TOKEN or not DATABASE_URL:
    print("‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ BOT_TOKEN –∞–±–æ DATABASE_URL!")
    exit(1)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS users(
            user_id BIGINT PRIMARY KEY,
            plus DOUBLE PRECISION DEFAULT 0,
            minus DOUBLE PRECISION DEFAULT 0,
            balance DOUBLE PRECISION DEFAULT 0,
            last_ack TIMESTAMP
        )
    """)
    await conn.close()

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    if not user:
        await conn.execute("INSERT INTO users(user_id) VALUES($1)", user_id)
    await conn.close()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ø–ª—é—Å—ñ–≤ —ñ –º—ñ–Ω—É—Å—ñ–≤.\n\n"
        "–ü–∏—à–∏ +5 –∞–±–æ -3, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /reset ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å.\n\n"
        "–©–æ–¥–Ω—è –æ 23:00 –∑–∞ –ö–∏—î–≤–æ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è üîî ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É¬ª.\n"
        "–ù–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏."
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        UPDATE users
        SET plus=0, minus=0, balance=0, last_ack=NULL
        WHERE user_id=$1
    """, user_id)
    await conn.close()
    await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∫–∏–Ω—É—Ç–æ!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    if not user:
        await conn.execute("INSERT INTO users(user_id) VALUES($1)", user_id)
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)

    if text.startswith(("+", "-")):
        try:
            value = float(text)
            plus = user["plus"]
            minus = user["minus"]
            if value > 0:
                plus += value
            else:
                minus += abs(value)
            balance = round(plus - minus, 2)
            await conn.execute("""
                UPDATE users
                SET plus=$1, minus=$2, balance=$3
                WHERE user_id=$4
            """, plus, minus, balance, user_id)
            await update.message.reply_text(
                f"‚úÖ –ü–ª—é—Å: {plus}\n‚ùå –ú—ñ–Ω—É—Å: {minus}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}"
            )
        except ValueError:
            await update.message.reply_text("–ü–∏—à–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –∑—ñ –∑–Ω–∞–∫–æ–º (+5 –∞–±–æ -3).")
    elif "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤" in text:
        last_ack = datetime.now(timezone.utc)
        await conn.execute("""
            UPDATE users
            SET last_ack=$1
            WHERE user_id=$2
        """, last_ack, user_id)
        await update.message.reply_text("üî• –ö—Ä–∞—Å–∞–≤–∞, –∞–ª—å—Ñ–∞ –ø—Ä–æ–∫—Ä—É—á–µ–Ω–∞!")
    else:
        await update.message.reply_text("–ü–∏—à–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –∞–±–æ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª üòâ")
    await conn.close()

# --- Broadcast ---
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.")
        return
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: /broadcast –¢–µ–∫—Å—Ç")
        return
    message = " ".join(context.args)
    conn = await asyncpg.connect(DATABASE_URL)
    users = await conn.fetch("SELECT user_id FROM users")
    success, fail = 0, 0
    for u in users:
        try:
            await context.bot.send_message(chat_id=u["user_id"], text=message)
            success += 1
        except:
            fail += 1
    await update.message.reply_text(f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø—ñ—à–Ω–æ: {success}, –ù–µ –≤–¥–∞–ª–æ—Å—è: {fail}")
    await conn.close()

# --- Daily reminder ---
async def daily_reminder(app: Application):
    while True:
        now = datetime.now(timezone.utc)
        target = now.replace(hour=20, minute=0, second=0, microsecond=0)  # 23:00 –ö–∏—ó–≤
        if now > target:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())
        conn = await asyncpg.connect(DATABASE_URL)
        users = await conn.fetch("SELECT user_id FROM users")
        for u in users:
            try:
                await app.bot.send_message(chat_id=u["user_id"], text="üîî –ü—Ä–æ–∫—Ä—É—Ç–∏ –∞–ª—å—Ñ—É!")
            except:
                pass
        await asyncio.sleep(3600)
        for u in users:
            try:
                await app.bot.send_message(chat_id=u["user_id"], text="‚è∞ –Ø–∫—â–æ —â–µ –Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∏–≤ ‚Äî —Å–∞–º–µ —á–∞—Å!")
            except:
                pass
        await conn.close()

# --- Main ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    async def start_tasks(app: Application):
        await init_db()
        asyncio.create_task(daily_reminder(app))

    app.post_init = start_tasks
    print("ü§ñ –ë–æ—Ç –∑ PostgreSQL –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway!")
    app.run_polling()

if __name__ == "__main__":
    main()

