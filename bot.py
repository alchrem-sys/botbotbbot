import json
import asyncio
from datetime import time
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import nest_asyncio

nest_asyncio.apply()

TOKEN = "8353609125:AAGzwKe0bWujPfrNWGo7T7VnEsixo3NSyFc"
DATA_FILE = "data.json"


def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {"plus": 0, "minus": 0, "balance": 0, "rolled": False}

    save_data(data)

    await update.message.reply_text(
        "–©–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ ‚Äî /start.\n"
        "–ü–∏—à–∏ –ª–∏—à–µ +1; -10; +107; -2.\n"
        "–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ —Ü–∏—Ñ—Ä–∏ ‚Äî /reset.\n\n"
        "–¶–∏—Ñ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑—ñ –∑–Ω–∞–∫–æ–º.\n"
        "–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è –æ 23:00 –∑–∞ –ö–∏—î–≤–æ–º –±—É–¥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ¬´–ü—Ä–æ–∫—Ä—É—Ç–∏ –ê–ª—å—Ñ—É üîÅ¬ª.\n"
        "–ü–∏—à–∏ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —è–∫—â–æ –∑—Ä–æ–±–∏–≤. –Ø–∫—â–æ –Ω—ñ ‚Äî —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É –Ω–∞–≥–∞–¥–∞—é –∑–Ω–æ–≤—É.\n\n"
        "‚ÄºÔ∏è –ü–∏—Å–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –∞–±–æ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª, —Ü–µ–π –±–æ—Ç –±—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î üôÇ"
    )


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()

    if user_id in data:
        data[user_id] = {"plus": 0, "minus": 0, "balance": 0, "rolled": False}
        save_data(data)
        await update.message.reply_text("üîÑ –£—Å—ñ –¥–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ!")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {"plus": 0, "minus": 0, "balance": 0, "rolled": False}

    text = update.message.text.lower().strip()

    if text.startswith("+") or text.startswith("-"):
        try:
            value = float(text)
            if value > 0:
                data[user_id]["plus"] += value
            else:
                data[user_id]["minus"] += abs(value)

            data[user_id]["balance"] += value
            save_data(data)

            await update.message.reply_text(
                f"‚úÖ –ü–ª—é—Å: {round(data[user_id]['plus'], 2)}\n"
                f"‚ùå –ú—ñ–Ω—É—Å: {round(data[user_id]['minus'], 2)}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {round(data[user_id]['balance'], 2)}"
            )

        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∑—ñ –∑–Ω–∞–∫–æ–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +5 –∞–±–æ -2.")

    elif "–ø—Ä–æ–∫—Ä—É—Ç–∏–≤" in text:
        data[user_id]["rolled"] = True
        save_data(data)
        await update.message.reply_text("‚úÖ –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ ‚Äî —Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∏–≤ —Å—å–æ–≥–æ–¥–Ω—ñ!")

    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞ –∞–±–æ ¬´–ø—Ä–æ–∫—Ä—É—Ç–∏–≤¬ª!")


async def send_daily_reminders(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    for user_id, user_data in data.items():
        user_data["rolled"] = False  # —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —â–æ–¥–Ω—è
        try:
            await context.bot.send_message(chat_id=int(user_id), text="üåÄ –ü—Ä–æ–∫—Ä—É—Ç–∏ –ê–ª—å—Ñ—É üîÅ")
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")

    save_data(data)


async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ 23:00 –∑–∞ –ö–∏—î–≤–æ–º
    kyiv_time = time(hour=23, minute=49)
    app.job_queue.run_daily(send_daily_reminders, time=kyiv_time)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway Worker!")
    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
